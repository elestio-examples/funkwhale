version: "3"

services:
  postgres:
    restart: always
    env_file: ./.env
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
      - POSTGRES_DB=funkwhale_database
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${ADMIN_PASSWORD}
    image: elestio/postgres:15
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  redis:
    restart: always
    env_file: ./.env
    image: elestio/redis:7.0
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - ./data/redis:/data

  celeryworker:
    restart: always
    image: funkwhale/api:${SOFTWARE_VERION_TAG}
    depends_on:
      - postgres
      - redis
    env_file: ./.env
    # Celery workers handle background tasks (such file imports or federation
    # messaging). The more processes a worker gets, the more tasks
    # can be processed in parallel. However, more processes also means
    # a bigger memory footprint.
    # By default, a worker will span a number of process equal to your number
    # of CPUs. You can adjust this, by explicitly setting the --concurrency
    # flag:
    #   celery -A funkwhale_api.taskapp worker -l INFO --concurrency=4
    command:
      - celery
      - --app=funkwhale_api.taskapp
      - worker
      - --loglevel=INFO
      - --concurrency=0
    environment:
      - C_FORCE_ROOT=true
    volumes:
      - "./funkwhale/data/music:/music:ro"
      - "./funkwhale/media:/srv/funkwhale/data/media"

  celerybeat:
    restart: always
    image: funkwhale/api:${SOFTWARE_VERION_TAG}
    command:
      - celery
      - --app=funkwhale_api.taskapp
      - beat
      - --loglevel=INFO
    depends_on:
      - postgres
      - redis
    env_file: ./.env

  api:
    restart: always
    image: funkwhale/api:${SOFTWARE_VERION_TAG}
    depends_on:
      - postgres
      - redis
    env_file: ./.env
    volumes:
      - "./funkwhale/music:/music:ro"
      - "./funkwhale/media:/srv/funkwhale/data/media"
      - "./funkwhale/static:/srv/funkwhale/data/static"

  front:
    restart: always
    image: funkwhale/front:${SOFTWARE_VERION_TAG}
    depends_on:
      - api
    env_file:
      - .env
    environment:
      # Override those variables in your .env file if needed
      - "NGINX_MAX_BODY_SIZE=${NGINX_MAX_BODY_SIZE-100M}"
    volumes:
      # Uncomment if you want to use your previous nginx config, please let us
      # know what special configuration you need, so we can support it with out
      # upstream nginx configuration!
      #- "./nginx/funkwhale.template:/etc/nginx/templates/default.conf.template:ro"
      #- "./nginx/funkwhale_proxy.conf:/etc/nginx/funkwhale_proxy.conf:ro"

      - "./funkwhale/music:/music:ro"
      - "./funkwhale/media:/srv/funkwhale/data/media:ro"
      - "./funkwhale/static:/usr/share/nginx/html/staticfiles:ro"
    ports:
      # override those variables in your .env file if needed
      - "${FUNKWHALE_API_IP}:${FUNKWHALE_API_PORT}:80"

  typesense:
    restart: always
    env_file:
      - ./.env
    image: typesense/typesense:0.24.0
    volumes:
      - ./typesense/data:/data
    command: --data-dir /data --enable-cors
